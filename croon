#!/usr/bin/env perl
#*!
# * croon 0.1.0
# * https://github.com/aadel112/croon/croon
# * @license GNU v3
# *
# * @documentation This script tries to adhere to the 
# * rules at https://cwiki.apache.org/confluence/display/VCL/Perl+Code+Style+Guidelines
# * it uses daux for docs
# *
# * Copyright (C) 2016 - aadel112.com - A project by Aaron Adel    
# */
use Schedule::Cron;
use Getopt::Std;
use File::Basename;
use Log::Log4perl qw(:easy);
use Data::Dumper;

# set minimum logging level
Log::Log4perl->easy_init($WARN);

main();

#/////////////////////////////////////////////////////////////////////////////
 
=head2 main
 
 Parameters  : none
 Returns     : int
 Description : This routine runs everything.
               It sets up the cron object and
               reloads it with each iteration
 
=cut

sub main{
    #instantiate singleton
    $LOG = Log::Log4perl->get_logger();
    #get cmdlien opts
    get_opts();
    #read from config
    %CFG = read_cfg() if( -s $CONFIG );
    #instantiate singketon
    $CRON = new Schedule::Cron(\&dispatcher);
    reload();
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 reload
 
 Parameters  : none
 Returns     : int
 Description : This sub checks the mtime of
               cron file, and compares it
               against the last load time
               of the file from memory, and
               reloads the file of it needs.
               The first time, the sub loads 
               it no matter what.
 
=cut

sub reload {
    my $cron_mtime = (stat $CRONFILE)[9];
    my $config_mtime = $CONFIG && -e $CONFIG ? (stat $CONFIG)[9] : 0;
    if(!$ST or $cron_mtime > $ST or $config_mtime > $ST) {

        $LOG->info("Init loading of cron $CRONFILE") if(!$ST);
        $LOG->info("$CRONFILE updated, reloading") if($ST);

        $CRON->load_crontab( $CRONFILE ) or die "Couldn't load your cronfile - $CRONFILE";
        $CRON->run(detach=>$FG?0:1, catch=>1);
        $ST = time;
    }
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 dispatcher
 
 Parameters  : cmd - string, [ skip_fork - bool ]
 Returns     : int
 Description : Is called when the timespec
               hits the now time
               execs the cmd by forking it
               Also prepends nice, ionice,
               time to each piece it 
               recognizes as a cmd
 
=cut

sub dispatcher {
    my ( $cmd, $skip_fork ) = @_;

    my $new_cmd = get_croon_cmd( $cmd );
    $LOG->info("$cmd became $new_cmd");
    if( $skip_fork ) {
        return $new_cmd;
    } else {
        fork_cmd( $new_cmd );
    }
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 fork_cmd
 
 Parameters  : cmd - string
 Returns     : inty
 Description : This sub forks the command off
 
=cut

sub fork_cmd {
    my $cmd = shift;
    my $pid = fork();
    
    return undef if($pid); #parent
    return fkd_exec($cmd) if($pid==0); #child
    return -1; #error
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 fkd_exec
 
 Parameters  : cmd - string
 Returns     : int
 Description : runs the forked command
 
=cut

sub fkd_exec { system( $_[0] ) }

#/////////////////////////////////////////////////////////////////////////////
 
=head2 get_croon_cmd
 
 Parameters  : cmd - string
 Returns     : string
 Description : This sub takes a cmd, and
               prepends the time, nice, and 
               ionice commands to it
               to get performance metrics
               , control priority to cpu on
               busy systems, and control 
               priority to io on busy systems
 
=cut

sub get_croon_cmd {
    my $cmd = shift;

    my @actions = get_actions( $cmd );
    $LOG->info("Cmd - $cmd, Actions - " . join( ', ', @actions ));
    foreach my $act ( @actions ) {
        my $time = get_timestr($act);
        my $nice = get_nicestr($act);
        my $ionice = get_ionicestr($act);

        $cmd =~ s/$act/$time $nice $ionice $act/;
    }
    return $cmd;
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 get_actions
 
 Parameters  : cmd - string
 Returns     : list
 Description : takes a command and returns 
               the actionable or executable
               pieces
 
=cut

sub get_actions {
    my $cmd = shift;

    my @actions = $cmd =~ /(?ips)[^\s\;><|]+/g;
    my $sz = scalar @actions;
    for( my $i = $sz - 1; $i >= 0; --$i ) {
        my $ac = $actions[$i];
        pop @actions if( !-X $ac && !-X which($ac) );
    }
    return @actions;
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 get_nicestr
 
 Parameters  : proc - string
 Returns     : string
 Description : prepends nice -n$prio
               where prio is the default, or
               overriden by the config
 
=cut

sub get_nicestr {
    my $proc = basename( $_[0] );

    my $prio = $CFG{$proc}->{'nice'};
    $prio = defined $prio ? $prio : $DNICE;
    return undef unless( $prio );

    return nice( $prio );
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 grt_ionicestr
 
 Parameters  : proc - string
 Returns     : string
 Description : prepends ionice -n$prio
               where prio is the default, or
               overriden by the config
 
=cut

sub get_ionicestr {
    my $proc = basename( $_[0] );

    my $prio = $CFG{$proc}->{'ionice'};
    $prio = defined $prio ? $prio : $DIO;
    return undef unless( $prio );

    return ionice( $prio );
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 get_timestr
 
 Parameters  : proc - string
 Returns     : string
 Description : prepends time
 
=cut

sub get_timestr {
    my $proc = basename( $_[0] );
    return undef if( (!defined $CFG{$proc} && $SKIP_PROFILE) or !$CFG{$proc}->{'prof'} );

    my $time = which('time');

    return $time;
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 nice
 
 Parameters  : prio - int
 Returns     : string
 Description : Builds nice -n$prio
 
=cut

sub nice {
    my ( $prio ) = @_;
    my $nice = which('nice');
    return undef unless( $nice );

    return "$nice -n$prio";
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 ionice

 Parameters  : prio - int
 Returns     : string
 Description : Builds ionice -n$prio

=cut

sub ionice {
	my ( $prio ) = @_;
    my $ionice = which('ionice');
    return undef unless( $ionice );

    return "$ionice -n$prio";
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 which
 
 Parameters  : cmd - string
 Returns     : string
 Description : Does a which of the exe to find
               the absolute path
 
=cut

sub which { 
    return undef if( $_[0] =~ /&/ );
    my $cmd = "which $_[0] 2>/dev/null";
    my $which = `$cmd`;
    chomp $which; 
    return $which; 
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 read_cfg
 
 Parameters  : none
 Returns     : hash, k => proc, v => hashref
 Description : builds the config stucture
 
=cut

sub read_cfg {
    my %ret = ();
	# processname, niceness, ioniceness, profile
    if( -s $CONFIG ) {
        open my $fh, '<', $CONFIG or die "Cannot open $CONFIG: $!";
        while ( my $line = <$fh> ) {
            chomp $line;
            next if( $line =~ /^(#|$)/ );
            
            my ( $proc, $nice, $ionice, $prof ) = split /,/, $line;
            
            $nice = 0 if($nice < 0);
            $nice = 20 if($nice > 20);
            $ionice = 0 if($ionice < 0);
            $ionice = 0 if($ionice > 7);

            my %tmp = (
                'nice' => int($nice),
                'ionice' => int($ionice),
                'prof' => int($prof)
            );
            $proc = basename( $proc );
            $ret{$proc} = \%tmp;
        }
        close $fh;
    } else {
        $LOG->warn("Config $CONFIG does not exist");
    }
    return %ret;
}

#/////////////////////////////////////////////////////////////////////////////
 
=head2 get_opts
 
 Parameters  : none
 Returns     : none
 Description : reads the cmdline opts into
               global variables
 
=cut

sub get_opts {
	my %o = ();
    getopts('C:F:N:D:PZ',\%o);

    $CRONFILE = $o{F} ? $o{F} : undef;
    $CONFIG = $o{C} ? $o{C} : undef;
    $DNICE = $o{N} ? int($o{N}): 10;
    $DIO = $o{D} ? int($o{D}) : 4;
    $SKIP_PROFILE = defined $o{P} ? 1 : 0;
    $FG = defined $o{Z} ? 1 : 0;

    $DNICE = 0 if($DNICE < 0);
    $DNICE = 20 if($DNICE > 20);
    $DIO = 0 if($DIO < 0);
    $DIO = 0 if($DIO > 7);
}
