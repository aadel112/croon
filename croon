#!/usr/bin/env perl
#*!
# * croon 0.1.0
# * https://github.com/aadel112/croon/croon
# * @license GNU v3
# *
# * Copyright (C) 2016 - aadel112.com - A project by Aaron Adel    
# */
use Schedule::Cron;
use Getopt::Std;
use File::Basename;
use Log::Log4perl qw(:easy);
use Data::Dumper;

# set minimum logging level
Log::Log4perl->easy_init($WARN);

main();

sub main{
    #instantiate singleton
    $LOG = Log::Log4perl->get_logger();
    #get cmdlien opts
    get_opts();
    #read from config
    %CFG = read_cfg() if( -s $CONFIG );
    #instantiate singketon
    $CRON = new Schedule::Cron(\&dispatcher);
    reload();
}

sub reload {
    my $mtime = (stat $CRONFILE)[9];
    if(!$ST or $mtime > $ST) {

        $LOG->info("Init loading of cron $CRONFILE") if(!$ST);
        $LOG->info("$CRONFILE updated, reloading") if($ST);

        $CRON->load_crontab( $CRONFILE ) or die "Couldn't load your cronfile - $CRONFILE";
        $CRON->run(detach=>$FG?0:1, catch=>1);
        $ST = time;
    }
}

sub dispatcher {
    my ( $cmd, $skip_fork ) = @_;

    my $new_cmd = get_croon_cmd( $cmd );
    $LOG->info("$cmd became $new_cmd");
    if( $skip_fork ) {
        return $new_cmd;
    } else {
        fork_cmd( $new_cmd );
    }
}

sub fork_cmd {
    my $cmd = shift;
    my $pid = fork();
    
    return undef if($pid); #parent
    return fkd_exec($cmd) if($pid==0); #child
    return -1; #error
}

sub fkd_exec {
    my $cmd = shift;
    my $rc = system( $cmd );
}

sub get_croon_cmd {
    my $cmd = shift;

    my @actions = get_actions( $cmd );
    $LOG->info("Cmd - $cmd, Actions - " . join( ', ', @actions ));
    foreach my $act ( @actions ) {
        my $time = get_timestr($act);
        my $nice = get_nicestr($act);
        my $ionice = get_ionicestr($act);

        $cmd =~ s/$act/$time $nice $ionice $act/;
    }
    return $cmd;
}

sub get_actions {
    my $cmd = shift;

    my @actions = $cmd =~ /(?ips)[^\s\;><|]+/g;
    my $sz = scalar @actions;
    for( my $i = $sz - 1; $i >= 0; --$i ) {
        my $ac = $actions[$i];
        pop @actions if( !-X $ac && !-X which($ac) );
    }
    return @actions;
}

sub get_nicestr {
    my $proc = basename( $_[0] );

    my $prio = $CFG{$proc}->{'nice'};
    $prio = defined $prio ? $prio : $DNICE;
    return undef unless( $prio );

    return nice( $prio );
}

sub get_ionicestr {
    my $proc = basename( $_[0] );

    my $prio = $CFG{$proc}->{'ionice'};
    $prio = defined $prio ? $prio : $DIO;
    return undef unless( $prio );

    return ionice( $prio );
}

sub get_timestr {
    my $proc = basename( $_[0] );
    return undef if( (!defined $CFG{$proc} && $SKIP_PROFILE) or !$CFG{$proc}->{'prof'} );

    my $time = which('time');

    return $time;
}

sub nice {
    my ( $prio ) = @_;
    my $nice = which('nice');
    return undef unless( $nice );

    return "$nice -n$prio";
}

sub ionice {
	my ( $prio ) = @_;
    my $ionice = which('ionice');
    return undef unless( $ionice );

    return "$ionice -n$prio";
}

sub which { 
    return undef if( $_[0] =~ /&/ );
    my $cmd = "which $_[0] 2>/dev/null";
    my $which = `$cmd`;
    chomp $which; 
    return $which; 
}

sub read_cfg {
    my %ret = ();
	# processname, niceness, ioniceness, profile
    if( -s $CONFIG ) {
        open my $fh, '<', $CONFIG or die "Cannot open $CONFIG: $!";
        while ( my $line = <$fh> ) {
            chomp $line;
            next if( $line =~ /^(#|$)/ );
            
            my ( $proc, $nice, $ionice, $prof ) = split /,/, $line;
            
            $nice = 0 if($nice < 0);
            $nice = 20 if($nice > 20);
            $ionice = 0 if($ionice < 0);
            $ionice = 0 if($ionice > 7);

            my %tmp = (
                'nice' => int($nice),
                'ionice' => int($ionice),
                'prof' => int($prof)
            );
            $proc = basename( $proc );
            $ret{$proc} = \%tmp;
        }
        close $fh;
    } else {
        $LOG->warn("Config $CONFIG does not exist");
    }
    return %ret;
}

sub get_opts {
	my %o = ();
    getopts('C:F:N:D:PZ',\%o);

    $CRONFILE = $o{F} ? $o{F} : undef;
    $CONFIG = $o{C} ? $o{C} : undef;
    $DNICE = $o{N} ? int($o{N}): 10;
    $DIO = $o{D} ? int($o{D}) : 4;
    $SKIP_PROFILE = defined $o{P} ? 1 : 0;
    $FG = defined $o{Z} ? 1 : 0;

    $DNICE = 0 if($DNICE < 0);
    $DNICE = 20 if($DNICE > 20);
    $DIO = 0 if($DIO < 0);
    $DIO = 0 if($DIO > 7);
}
